{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The SparkFun Temperature Sensor - STTS22H (Qwiic) and the SparkFun Micro Temperature Sensor - STTS22H (Qwiic) are Qwiic enabled breakout boards based on the ultralow-power, high-accuracy, digital temperature sensor STTS22H from ST Microelectronics. Thanks to its factory calibration the STTS22H offers high-end accuracy performance over the entire operating temperature range, reaching as low as \u00b10.5 \u00b0C without requiring any further calibration at the application level. </p> SparkFun Temperature Sensor - STTS22H (Qwiic) SparkFun Micro Temperature Sensor - STTS22H (Qwiic) <p></p>"},{"location":"#required-materials","title":"Required MaterialsSparkFun Temperature Sensor - STTS22H (Qwiic)SparkFun Micro Temperature Sensor - STTS22H (Qwiic)SparkFun RedBoard QwiicUSB micro-B Cable - 6 FootQwiic Cable - 50mm","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> SEN-21262 SEN-21273 DEV-15123 CAB-10215 PRT-14426"},{"location":"#suggested-reading","title":"Suggested ReadingI2C             Serial Basic Hookup Guide             RedBoard Hookup Guide","text":"<p>If you aren't familiar with the Qwiic system, we recommend reading here for an overview.</p> <p> Qwiic Connect System </p> <p> </p> <p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p>"},{"location":"contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Temperature Sensor - STTS22H (Qwiic) repository.</li> </ul>"},{"location":"contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Temperature Sensor - STTS22H (Qwiic) repository. </li> </ul>"},{"location":"contribute/#sumbit-a-design-improvement","title":"Sumbit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#example-1-basic-readings","title":"Example 1: Basic Readings","text":"<p>Now that we've got our library installed and our hardware all hooked up, let's look at some examples.</p> <p>This first example just does some basic measurements. To find Example 1, go to File &gt; Examples &gt; SparkFun Temperature Sensor - STTS22H &gt; example1-basic:</p> <p>Alternatively, you can copy and paste the code below to a shiny new Arduino file:</p> Example 1 Arduino Code <pre><code>/*\nexample1-basic.ino\n\nThis example shows basic data retrieval from the SparkFun Temperature Sensor - STTS22H.\n\nOutput Data Rates: \n\nSTTS22H_POWER_DOWN\nSTTS22H_ONE_SHOT  \nSTTS22H_1Hz       \nSTTS22H_25Hz      \nSTTS22H_50Hz      \nSTTS22H_100Hz     \nSTTS22H_200Hz     \n\nWritten by: \nElias Santistevan @ SparkFun Electronics December, 2022\n\nProducts: \n   SparkFun Temperature Sensor - STTS2H              https://www.sparkfun.com/products/21262\n   SparkFun Micro Temperature Sensor - STTS2H        https://www.sparkfun.com/products/21051\n\nRepository:\n     https://github.com/sparkfun/SparkFun_STTS22H_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT\nLicense(http://opensource.org/licenses/MIT).\n\n*/\n\n#include &lt;Wire.h&gt;\n#include \"SparkFun_STTS22H.h\"\n\nSparkFun_STTS22H mySTTS; \n\nfloat temp; \n\nvoid setup()\n{\n\n    Wire.begin();\n\n    Serial.begin(115200);\n\n    if( !mySTTS.begin() )\n    {\n        Serial.println(\"Did not begin.\");\n        while(1);\n    }\n\n    Serial.println(\"Ready\");\n\n    // Other output data rates can be found in the description\n    // above. To change the ODR or mode, the device must first be\n    // powered down.\n    mySTTS.setDataRate(STTS22H_POWER_DOWN);\n    delay(10);\n    mySTTS.setDataRate(STTS22H_1Hz);\n\n    // Enables incrementing register behavior for the IC.\n    // It is not enabled by default as the datsheet states and\n    // is vital for reading the two temperature registers.\n    mySTTS.enableAutoIncrement();\n\n    delay(100);\n}\n\nvoid loop()\n{\n\n    // Only use data ready for one-shot mode or 1Hz output. \n    if( mySTTS.dataReady() ) \n    {\n\n        mySTTS.getTemperatureF(&amp;temp);\n\n        // Temperature in different units can be retrieved\n        // using the following functions.\n\n        //mySTTS.getTemperatureC(&amp;temp);\n        //mySTTS.getTemperatureK(&amp;temp);\n\n        Serial.print(\"Temp: \"); \n        Serial.print(temp);\n        Serial.println(\"F\"); \n\n    } \n\n    // delay = 1/ODR \n    delay(1000);\n\n}\n</code></pre> <p>Once you've got your code uploaded, open up a Serial Monitor and check out your output. </p>"},{"location":"examples/#example-2-interrupts","title":"Example 2: Interrupts","text":"<p>Once the library is installed, go ahead and open up File-&gt;Examples-&gt;SparkFun Temperature Sensor - STTS22H &gt; example2-interrupt:</p> <p>Make sure to select your board (SparkFun RedBoard) and COM port before hitting upload to begin experimenting with the air quality sensor. Alternatively, you can copy and paste the code below into a nice new Arduino sketch: </p> Example 2 Arduino Code <pre><code>/*\nexample2_basic.ino\n\nThis example desmonstrates how to set temperature thresholds to trigger an interrupt. \n\nOutput Data Rates: \n\nSTTS22H_POWER_DOWN\nSTTS22H_ONE_SHOT  \nSTTS22H_1Hz       \nSTTS22H_25Hz      \nSTTS22H_50Hz      \nSTTS22H_100Hz     \nSTTS22H_200Hz     \n\nWritten by: \nElias Santistevan @ SparkFun Electronics December, 2022\n\nProducts: \n   SparkFun Temperature Sensor - STTS2H              https://www.sparkfun.com/products/21262\n   SparkFun Micro Temperature Sensor - STTS2H        https://www.sparkfun.com/products/21051\n\nRepository:\n     https://github.com/sparkfun/SparkFun_STTS22H_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT\nLicense(http://opensource.org/licenses/MIT).\n\n*/\n\n#include &lt;Wire.h&gt;\n#include \"SparkFun_STTS22H.h\"\n\nSparkFun_STTS22H mySTTS; \n\nfloat temp; \n\n// These values are in Farenheit\nfloat interruptHighValue = 90.5;\nfloat interruptLowValue = 42.0;\n\nint tempInterrupt = 1; \n\nvoid setup()\n{\n\n    Wire.begin();\n\n    Serial.begin(115200);\n\n    pinMode(tempInterrupt, INPUT);\n\n    if( !mySTTS.begin() )\n    {\n        Serial.println(\"Did not begin.\");\n        while(1);\n    }\n\n    Serial.println(\"Ready\");\n\n    // Other output data rates can be found in the description\n    // above. To change the ODR or mode, the device must first be\n    // powered down.\n    mySTTS.setDataRate(STTS22H_POWER_DOWN);\n    delay(10);\n    mySTTS.setDataRate(STTS22H_25Hz);\n\n    // Enables incrementing register behavior for the IC.\n    // It is not enabled by default as the datsheet states and\n    // is vital for reading the two temperature registers.\n    mySTTS.enableAutoIncrement();\n\n    // Set interrupts for both lower and higher thresholds.\n    // Note: These functions accept Farenheit as their arguments.\n    // Other functions for different units just below. \n    mySTTS.setInterruptLowF(interruptLowValue);\n    mySTTS.setInterruptHighF(interruptHighValue);\n\n    //mySTTS.setInterruptLowC(interruptLowValue);\n    //mySTTS.setInterruptHighC(interruptHighValue);\n\n    //mySTTS.setInterruptLowK(interruptLowValue);\n    //mySTTS.setInterruptHighK(interruptHighValue);\n\n    delay(100);\n}\n\nvoid loop()\n{\n\n    // Checking if data ready is not necessary when output is set higher \n    // than 1Hz. \n    mySTTS.getTemperatureF(&amp;temp);\n\n    // Temperature in different units can be retrieved\n    // using the following functions.\n\n    //mySTTS.getTemperatureC(&amp;temp);\n    //mySTTS.getTemperatureK(&amp;temp);\n\n    Serial.print(\"Temp: \"); \n    Serial.print(temp);\n    Serial.println(\"F\"); \n\n    if( digitalRead(tempInterrupt) == LOW )\n    {\n        Serial.println(\"Temperature threshold\"); \n        while(1);\n    }\n\n    // delay = 1/ODR \n    delay(40);\n\n}\n</code></pre> <p>Note that depending on which processor board you are using, you may need to alter the Interrupt Pin. Since we're using a RedBoard here, our Interrupt Pin is 2 (<code>ensInt = 2</code>). Also, in this example, we've used an IC hook with a pigtail to connect the Interrupt Pin to the RedBoard pin 2, but you can also solder headers to the STTS22H Temperature Sensor so you can use the interrupt pin. Your hardware hookup should look something like the following: </p> <p>Once you've got your code uploaded, open up a Serial Monitor and check out your output. </p> <p>If you have a look at the code, you'll notice that we've set our upper threshhold to 90.5 degrees F, and our lower threshhold to 42 degrees F. I held the sensor in front of a heater to hit the upper threshhold: </p> <p>The lower threshhold was reached by sticking the sensor in a plastic bag and then putting that plastic bag into ice water:</p>"},{"location":"examples/#example-3-one-shot","title":"Example 3: One Shot","text":"<p>The One-Shot operating mode of the STTS22H allows for the temperature measurement to be made and then the device puts itself in a power-down condition. In one-shot mode, the sensor current consumption falls to 1.75 \u00b5A, though the full breakout board will draw a bit higher due to the LED &amp;etc. </p> <p>Go ahead and open up File-&gt;Examples-&gt;SparkFun Temperature Sensor - STTS22H -&gt;example3-one_shot. Make sure to select your board (SparkFun RedBoard) and COM port before hitting upload to begin experimenting with the air quality sensor.</p> <p>Alternatively, you can copy and paste the code below into a nice new Arduino sketch: </p> Example 3 Arduino Code <pre><code>/*\nexample3-one_shot.ino\n\nThis example shows basic data retrieval using the \"one-shot\" feature i.e. - get the temp\nnow feature. \n\nOutput Data Rates: \n\nSTTS22H_POWER_DOWN\nSTTS22H_ONE_SHOT   &lt; -------- This one. \nSTTS22H_1Hz       \nSTTS22H_25Hz      \nSTTS22H_50Hz      \nSTTS22H_100Hz     \nSTTS22H_200Hz     \n\nWritten by: \nElias Santistevan @ SparkFun Electronics December, 2022\n\nProducts: \n   SparkFun Temperature Sensor - STTS2H              https://www.sparkfun.com/products/21262\n   SparkFun Micro Temperature Sensor - STTS2H        https://www.sparkfun.com/products/21051\n\nRepository:\n     https://github.com/sparkfun/SparkFun_STTS22H_Arduino_Library\n\nSparkFun code, firmware, and software is released under the MIT\nLicense(http://opensource.org/licenses/MIT).\n\n*/\n\n#include &lt;Wire.h&gt;\n#include \"SparkFun_STTS22H.h\"\n\nSparkFun_STTS22H mySTTS; \n\nfloat temp; \n\nvoid setup()\n{\n\n    Wire.begin();\n\n    Serial.begin(115200);\n\n    if( !mySTTS.begin() )\n    {\n        Serial.println(\"Did not begin.\");\n        while(1);\n    }\n\n    Serial.println(\"Ready\");\n\n    // Other output data rates can be found in the description\n    // above. To change the ODR or mode, the device must first be\n    // powered down.\n    mySTTS.setDataRate(STTS22H_POWER_DOWN);\n    delay(10);\n    // Force new reading, temp sensor will power down after conversion. \n    mySTTS.setDataRate(STTS22H_ONE_SHOT); \n\n    // Enables incrementing register behavior for the IC.\n    // It is not enabled by default as the datsheet states and\n    // is vital for reading the two temperature registers.\n    mySTTS.enableAutoIncrement();\n\n    delay(100);\n}\n\nvoid loop()\n{\n\n    // Temp sensor will power down automatically after single read.\n    if( mySTTS.dataReady() ) \n    {\n\n        mySTTS.getTemperatureF(&amp;temp);\n\n        // Temperature in different units can be retrieved\n        // using the following functions.\n\n        //mySTTS.getTemperatureC(&amp;temp);\n        //mySTTS.getTemperatureK(&amp;temp);\n\n        Serial.print(\"Temp: \"); \n        Serial.print(temp);\n        Serial.println(\"F\"); \n\n        // Wait 10 seconds for until we initiate another read.\n        delay(10000);\n\n        // Enable another reading.\n        mySTTS.setDataRate(STTS22H_ONE_SHOT); \n\n    } \n\n    // Demonstrative delay. \n    delay(100);\n\n}\n</code></pre> <p>Once you've got your code uploaded, open up a Serial Monitor and check out your output. You should see something like the following:</p> <p>This really isn't all that exciting until you measure the current consumption! </p>"},{"location":"file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Temperature Sensor - STTS22H (Qwiic) repository.</li> </ul>"},{"location":"file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Temperature Sensor - STTS22H (Qwiic) repository. </li> </ul>"},{"location":"file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I2C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>The delightful thing about our Qwiic System is that it makes hooking up your project as easy as plug and play. Pop one end of your Qwiic connector into the controlling board and plug the other end of your Qwiic connector into your STTS22H Temperature Sensor board! Voila!</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#stts22h","title":"STTS22H","text":"<p>The STTS22H is an ultralow-power, high-accuracy, digital temperature sensor offering high performance over the entire operating temperature range. Thanks to its factory calibration the STTS22H offers high-end accuracy performance over the entire operating temperature range, reaching as low as \u00b10.5 \u00b0C without requiring any further calibration at the application level. The sensor operating mode is user-configurable and allows selecting between different ODRs (down to 1 Hz) or the one-shot mode for battery saving. In one-shot mode, the sensor current consumption falls to 1.75 \u00b5A. For more information, refer to the datasheet. </p> STTS22H STTS22H on Micro"},{"location":"hardware_overview/#qwiic-connectors","title":"Qwiic Connectors","text":"<p>There are two Qwiic connectors on either side of the SparkFun Temperature Sensor - STTS22H to provide power and I2C connectivity simultaneously. The Micro version has a single Qwiic connector that again provides power and I2C connectivity. The I2C address of both boards is 0x3C by default, but the 1x1 board has 3 other addresses the board can be configured to use, while the Micro has 1 other address available.</p> Qwiic Connectors Qwiic Connector on Micro"},{"location":"hardware_overview/#power","title":"Power","text":"<p>Ideally, power will be supplied via the Qwiic connector(s). Alternatively, power can be supplied through the header along the bottom side of the board labeled <code>3V3</code> and <code>GND</code>. The input voltage range should be between 1.5-3.6V. The Micro version has a single Ground Pin available. </p> 3.3V &amp; GND Pins GND Pin on Micro \u26a1 Note:  There is no onboard voltage regulation on either of these boards. If you choose to provide power via the plated through holes, ensure that your voltage does not exceed 5.5V."},{"location":"hardware_overview/#interrupt-pin","title":"Interrupt Pin","text":"<p>An interrupt pin is available to signal the application whenever the selectable high or low threshold has been exceeded.</p> Interrupt Pin Interrupt Pin on Micro"},{"location":"hardware_overview/#power-led","title":"Power LED","text":"<p>Hopefully this is self-explanatory, but this LED lights up when power is supplied to the board. </p> Power LED Power LED on Micro"},{"location":"hardware_overview/#exposed-pad","title":"Exposed Pad","text":"<p>There's an extra pad on the bottom side of each board that allows for the most accurate possible readings. </p> Exposed Pad Exposed Pad on Micro"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":""},{"location":"hardware_overview/#led-jumper","title":"LED Jumper","text":"<p>If power consumption is an issue, cut this jumper to disable the LED on the front of the board. </p> Power LED Jumper Power LED Jumper on Micro"},{"location":"hardware_overview/#address-jumpers","title":"Address Jumpers","text":"<p>The 1x1 board has two address jumpers available. The default I2C address is 0x3C. By cutting various trace combinations, there are three other I2C addresses available. </p> ADDR R8(15K) 0x3C (Default) R7(56K) 0x3E VDD 0x38 GND 0x3F OPEN Undefined Address Jumper Address Jumper 1 <p>The Micro version of this board has a single address jumper that affords the ability to change the I2C address from 0x3C (Default) to 0x38. </p> Address Jumper on Micro"},{"location":"hardware_overview/#i2c-jumper","title":"I2C Jumper","text":"<p>These boards are both equipped with pull-up resistors. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joint between the two jumper pads highlighted below. </p>  .tg  {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-v0mg{border-color:#ffffff;text-align:center;vertical-align:middle}  I2C Jumper I2C Jumper on Micro"},{"location":"hardware_overview/#board-outline","title":"Board Outline","text":"<p>The standard Temperature Sensor STTS22H Breakout measures 1\" x 1\". </p>  .tg  {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-v0mg{border-color:#ffffff;text-align:center;vertical-align:middle}  Board Outline of 1\" x 1\" <p>The Micro Temperature Sensor STTS22H Breakout measures 0.75\" x 0.3\". </p>  .tg  {border-collapse:collapse;border-spacing:0;} .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;} .tg .tg-v0mg{border-color:#ffffff;text-align:center;vertical-align:middle}  Board Outline of Micro"},{"location":"print_pdf/","title":"Download Hookup Guide","text":"<p>Download </p>"},{"location":"resources_and_going_further/","title":"Resources","text":"<p>Now that you've successfully got your STTS22H Temperature Sensor up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <p>SparkFun Temperature Sensor - STTS22H (Qwiic):</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files</li> <li>Board Outline (PNG)</li> </ul> <p>SparkFun Micro Temperature Sensor - STTS22H (Qwiic):</p> <ul> <li>Schematic (PDF)</li> <li>Eagle Files</li> <li>Board Outline (PNG)</li> </ul> <p>General Information: </p> <ul> <li>Datasheet(PDF)</li> <li>Qwiic Info Page</li> <li>STTS22H Arduino Library</li> <li>GitHub Hardware Repo</li> </ul> <p>Or check out other Qwiic Sensor Tutorials:</p> SparkFun Humidity Sensor Breakout - SHTC3 (Qwiic) Hookup Guide              Qwiic Atmospheric Sensor (BME280) Hookup Guide              Qwiic TMP117 High Precision Digital Temperature Sensor Hookup Guide              Qwiic Pressure Sensor (BMP384) Hookup Guide"},{"location":"software_setup_and_programming/","title":"Software Setup and Programming","text":"<p>Note</p> <p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino, please review our tutorial on installing the Arduino IDE. If you have not previously installed an Arduino library, please check out our installation guide.</p> <p>SparkFun has written a library to work with the SparkFun Temperature Sensor - STTS22H (Qwiic). You can obtain this library through the Arduino Library Manager by searching for \"STTS22H\". Find the one written by SparkFun Electronics and install the latest version. If you prefer downloading libraries manually, you can grab them from the GitHub Repository.</p> SparkFun STTS22H Temperature Sensor Arduino Library (ZIP)"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"}]}